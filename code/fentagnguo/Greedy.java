// 给一个糖果数（<10000000000),
// 如果不能平分可以再取一个糖果或者放回一个糖果
// 问最终糖果变成1最少需要操作几次（+1/-1/÷2)

import java.util.*;

public class Greedy {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long x = sc.nextLong();
        int count = 0;
        for(long i = x; i != 1; i /= 2, count++) {
            if(i == 3) { // 放回一个糖果再评分，这是3最快的情况
                count += 2;
                break;
            }
            if(i % 2 != 0) {
                if((i+1) / 2 % 2 == 0) {
                    ++i;
                } else {
                    --i;
                }
                count++;
            }
        }
        System.out.println(count);
    }
}


/*
    
    局部最优推导致全局最优的例子    
    
    数学证明
    假设当前奇数为i，分两种情况：

    情况 1：(i+1)/2是偶数（能被 2 整除），则选择 + 1。例如：
    i=7，+1 后为 8，下一步为 4，再下一步为 2，共 3 步。
    若选择 - 1，i=6，下一步为 3，再需要 2 步，共 4 步。
    情况 2：(i-1)/2是偶数，则选择 - 1。例如：
    i=5，-1 后为 4，下一步为 2，共 2 步。
    若选择 + 1，i=6，下一步为 3，再需要 2 步，共 3 步。
    为什么只看一步？
    贪心策略的核心是局部最优导致全局最优。在这个问题中：

    每次选择 + 1 或 - 1 后，下一步的糖果数能被 4 整除，意味着接下来可以连续两次除以 2，减少总步骤。
    数学上可以证明，这种选择不会导致后续步骤陷入更差的情况，因此只需看一步即可。
    
 */